service: espcharts-serverless-backend
frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs18.x
  profile: joanserv
  region: eu-north-1
  stage: ${opt:stage, 'dev'}
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"


functions:
  # Player functions
  createPlayer:
    handler: src/handlers/PlayerHandlers/Post.handler
    events:
      - http:
          path: /espcharts/players
          method: post
          cors: true

  getAllPlayers:
    handler: src/handlers/PlayerHandlers/GetAll.handler
    events:
      - http:
          path: /espcharts/allPlayers
          method: get
          cors: true

  getPlayerById:
    handler: src/handlers/PlayerHandlers/GetById.handler
    events:
      - http:
          path: /espcharts/players/{id}
          method: get
          cors: true

  getPlayerPages:
    handler: src/handlers/PlayerHandlers/GetPages.handler
    events:
      - http:
          path: /espcharts/players
          method: get
          cors: true

  updatePlayer:
    handler: src/handlers/PlayerHandlers/Update.handler
    events:
      - http:
          path: /espcharts/players/{id}
          method: put
          cors: true

  deletePlayer:
    handler: src/handlers/PlayerHandlers/Delete.handler
    events:
      - http:
          path: /espcharts/players/{id}
          method: delete
          cors: true

  # Team Functions
  createTeam:
    handler: src/handlers/TeamHandlers/Post.handler
    events:
      - http:
          path: /espcharts/teams
          method: post
          cors: true

  getAllTeams:
    handler: src/handlers/TeamHandlers/GetAll.handler
    events:
      - http:
          path: /espcharts/allTeams
          method: get
          cors: true

  getTeamById:
    handler: src/handlers/TeamHandlers/GetById.handler
    events:
      - http:
          path: /espcharts/teams/{id}
          method: get
          cors: true

  updateTeam:
    handler: src/handlers/TeamHandlers/Update.handler
    events:
      - http:
          path: /espcharts/teams/{id}
          method: put
          cors: true

  getTeamPages:
    handler: src/handlers/TeamHandlers/GetPages.handler
    events:
      - http:
          path: /espcharts/teams
          method: get
          cors: true

  deleteTeam:
    handler: src/handlers/TeamHandlers/Delete.handler
    events:
      - http:
          path: /espcharts/teams/{id}
          method: delete
          cors: true

  # Tournament Functions
  createTournament:
    handler: src/handlers/TournamentHandler/Post.handler
    events:
      - http:
          path: /espcharts/tournaments
          method: post
          cors: true

  getAllTournaments:
    handler: src/handlers/TournamentHandler/GetAll.handler
    events:
      - http:
          path: /espcharts/allTournaments
          method: get
          cors: true

  getTournamentById:
    handler: src/handlers/TournamentHandler/GetById.handler
    events:
      - http:
          path: /espcharts/tournaments/{id}
          method: get
          cors: true

  updateTournament:
    handler: src/handlers/TournamentHandler/Update.handler
    events:
      - http:
          path: /espcharts/tournaments/{id}
          method: put
          cors: true

  getTournamentPages:
    handler: src/handlers/TournamentHandler/GetPages.handler
    events:
      - http:
          path: /espcharts/tournaments
          method: get
          cors: true

  deleteTournament:
    handler: src/handlers/TournamentHandler/Delete.handler
    events:
      - http:
          path: /espcharts/tournament/{id}
          method: delete
          cors: true

  sendConfirmEmail:
    handler: src/handlers/MailHandlers/Mail.sendConfirmEmailfromServer
    events:
      - http:
          path: /espcharts/subscribe
          method: post
          cors: true

  confirmToken:
    handler: src/handlers/MailHandlers/Mail.confirmToken
    events:
      - http:
          path: /espcharts/confirm/{token}
          method: get
          cors: true
  #Authentication Functions
  loginUser:
    handler: src/handlers/UserHandlers/Login.handler
    events:
      - http:
          path: /espcharts/login
          method: post
          cors: true

  signupUser:
    handler: src/handlers/UserHandlers/SignUp.handler
    events:
      - http:
          path: /espcharts/signup
          method: post
          cors: true

  privateAPI:
    handler: src/handlers/UserHandlers/Private.handler
    events:
      - http:
          path: espcharts/private
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool-SLS
        Schema:
          - Name: email
            Required: true
            Mutable: true
            AttributeDataType: String
          - Name: given_name
            Mutable: true
            AttributeDataType: String
          - Name: family_name
            Mutable: true
            AttributeDataType: String
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes:
          - email

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: !Ref UserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"